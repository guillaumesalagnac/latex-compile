#!/usr/bin/env python3

import argparse

import glob,os, re, sys

def try_remove(filename):
    if os.path.exists(filename):
        if not options.quiet:
            print("deleting "+filename)
        os.remove(filename)

suffixes=['aux', 'bcf', 'bbl', 'blg', 'brf', 'dvi', 'fls',
          'fdb_latexmk', 'log','maf', 'mtc', 'mtc0', 'nav', 'out',
          'ps', 'pdf', 'pdfsync', 'pyg', 'run.xml', 'snm',
          'synctex.gz', 'synctex(busy)', 'tex~', 'bib~', 'snm',
          'toc', 'vrb',
          'glg','glo','gls','ist',# glossaries.sty
          'ilg','ind','xdy',#xindy
          'loc','soc', #changes.sty
          'auxlock',# tikz w/ externalize
          ]

def do_clean():
    for document in glob.glob("*.tex"):
        document=document.replace('.tex','')
        for filename in [ document+'.'+suffix for suffix in suffixes ]:
            try_remove(filename)
            
        # biblatex
        try_remove(document+'-blx.bib')

        # pdfjam-slides6up
        try_remove(document+'-6up.pdf')

        #minted/pygmentize
        if os.path.exists('_minted-'+document):
            for filename in glob.glob('_minted-'+document+'/*.pygtex'):
                try_remove(filename)
            for filename in glob.glob('_minted-'+document+'/*.pygstyle'):
                try_remove(filename)
                
            os.rmdir('_minted-'+document)
        
        for slide in range(0,50):
            try_remove(document+'.'+str(slide)+'.vrb')
    
    for filename in ['texput.log','missingfonts.log','missfont.log','.figanim-generated-files']:
        try_remove(filename)

    for filename in glob.glob('pdflatex[0-9]*.fls'):
        try_remove(filename)
        
    for filename in glob.glob('*.pdftex'):#+glob.glob('fig/*.pdftex'):
        fig=re.sub(r'(\+[0-9,]+)?\.pdftex','.fig',filename)
        if os.path.exists(fig):
            try_remove(filename)
            try_remove(filename+'_t')
    
    for filename in glob.glob('*.eps'):
        fig=re.sub(r'.eps','.fig',filename)
        if os.path.exists(fig):
            try_remove(filename)
    
    for filename in glob.glob('*.pdf')+glob.glob('*/*.pdf'):
        fig=re.sub(r'.pdf','.eps',filename)
        if os.path.exists(fig):
            try_remove(filename)
    
    for filename in glob.glob('*-eps-converted-to.pdf')+glob.glob('*/*converted-to.pdf'):
        fig=re.sub(r'-eps-converted-to.pdf','.eps',filename)
        if os.path.exists(fig):
            try_remove(filename)
    
    for filename in glob.glob('*.pdf'):#+glob.glob('fig/*.pdftex'):
        fig=re.sub(r'(\+[0-9,]+)?\.pdf','.fig',filename)
        if os.path.exists(fig):
            try_remove(filename)
            try_remove(filename+'_t')

    # tikz externalization library
    for filename in glob.glob('*-figure[0-9]*.pdf'):
        base=filename[:-4]
        if (os.path.exists(base+'.dpth') and
            os.path.exists(base+'.log') and
            os.path.exists(base+'.md5')):
            try_remove(base+'.dpth')
            try_remove(base+'.log')
            try_remove(base+'.md5')
            try_remove(base+'.pdf')

if __name__ == '__main__':        
    argparser = argparse.ArgumentParser(description="delete all latex-related generated files")
    argparser.add_argument('-k','--keep-pdf', help='keep main pdf file',action="store_true")
    argparser.add_argument('-q','--quiet', help='dont print the names of deleted files',action="store_true")

    options=argparser.parse_args()

    if options.keep_pdf:
        suffixes.remove('pdf')

    do_clean()
