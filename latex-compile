#!/usr/bin/env python3

import subprocess
import os, re, sys, time, string
import argparse

re_file_line_error= re.compile(r'.*:[0-9]*:.*')

re_warning = re.compile("(Package|Class)( (?P<pkg>.*)) Warning: (?P<text>.*)$")

re_package_error = re.compile(".*Package (?P<pkg>.*) Error: .*$")

class RunCommandError(Exception): pass

def run_pdflatex():
    """Run pdflatex on jobname.
    In case of success, return silently.
    In case of error, pretty-print the error message and raise a RunCommandError."""
        
    try:
        subprocess.check_output([options.engine,
                                 "-halt-on-error",
                                 "-file-line-error",
                                 "-synctex=1",
                                 "-recorder",
                                 "-shell-escape",
                                 "-interaction=nonstopmode",
                                 jobname],
                                stderr=subprocess.STDOUT,
        )
        return 
    except subprocess.CalledProcessError as e:
        log=e.output.decode('utf-8', errors='ignore').splitlines()
    
    acc=""
    prefix=None
    for line in unbreak79(log):

        # long error logic. cf #14 #37
        if prefix is not None:
            if line[:len(prefix)] == prefix:
                text.append( line[len(prefix):].strip() )
            else:
                line=" ".join(text)
                break

        if "LaTeX Error:" in line: # cf #07
            break

        if "Runaway argument" in line: # cf #54
            break

        if re_package_error.match(line):
            m=re_package_error.match(line)
            prefix = "(%s)" % m.groupdict()["pkg"]
            text = [line]
            continue
            
        if re_file_line_error.search(line):
            break

    else:
        print("could not understand error ; dumping raw logfile")
        # try to be useful even if we could not understand the log
        print("...")
        print("...")
        print("\n".join( log[-10:] )) # cf #33

        raise RunCommandError # notify caller of compile error

    # 1) display the (pretty-printed) main error message
    print(line)

    # 2) print the details, i.e. everything up to the offending line
    try:
        # first, we try locate the main error message, so as to start from there
        i=1+log.index(line[:79]) # :79 to unjoin line cf #37
    except ValueError:
        # Note: this happens for instance in test-cases #16, which I
        # don't want to write specific logic for. take that, fancyvrb.
        raise RunCommandError #notify caller of compile error
    
    for detail in log[i:]:
        if detail.strip() in line:
            # discard this fragment if already joined into "line"
            continue
        if prefix is not None: # iff we are dealing with a package error
            # similarly: discard long-error fragments when already joined
            if detail[ len(prefix):].strip() in line:
                continue
            # and discard generic RTFM advice
            if detail == "See the "+prefix[1:-1]+" package documentation for explanation.":
                continue
        # supress superfluous noise: RTFM, boilerplate, etc.
        if detail.strip() in ["See the LaTeX manual or LaTeX Companion for explanation.",
                              "Type  H <return>  for immediate help.",
                              "Type X to quit or <RETURN> to proceed,",
                              "Enter file name:",
                              "...", "<read *>",
                              ""]:
            continue
        # suppress interactive querying for all extensions (.sty and others)
        if "or enter new name. (Default extension:" in detail:
            continue

        # sometimes there is no offending line to be reached cf #54
        if 'Runaway argument' in line and '<inserted text>' in detail:
            break

        print(detail)

        # Have we reached the offending line yet ?
        if detail[:2].startswith("l."): 
            j=log.index(detail) # kludge
            if log[j+1].strip(): # offending line is sometimes displayed broken in two pieces cf #14
                print(log[j+1])
            break    
    
    raise RunCommandError # notify caller of compile error

def bibtex_needed(old_aux):
    """Guess whether we need to run bibtex"""
    log=readfile(jobname+".log")  #52
    
    if "No file "+jobname+".bbl" in log:
        # print("bibtex is needed because no file "+jobname+".bbl")
        return True # test-cases #03, #15...

    # design note: we rerun bibtex even if there were only warnings,
    # so as to annoy the user, hoping for them to correct their .bib
    # files :-)
    if os.path.isfile(jobname+".blg"):
        blg=readfile( jobname+".blg" )
        if "error message" in blg: return True # test-case #31
        if "Warning--" in blg: return True # test-case #32

    # detect hard-coded bibliographies (and maybe other corner cases)
    # which don't use bibtex at all. (cf e.g. #15)
    if not os.path.isfile(jobname+".bbl") and not os.path.isfile(jobname+".blg"):
        return False

    if old_aux:
        old_citations = [ line[10:-1] for line in old_aux.splitlines() if line[:10] == r'\citation{' ]
    else:
        old_citations = set()
    
    new_citations = [ line[10:-1] for line in readfile(jobname+'.aux').splitlines() if line[:10] == r'\citation{' ]

    # compare both sets to detect new or removed citations (cf #22 #40)
    if set(old_citations) != set(new_citations):
        # print("bibtex is needed because some citations have added or removed")
        return True

    if os.path.isfile(jobname+".blg"): # cf test-case #49
        last_bibtex_time = os.path.getmtime(jobname+".blg")
        bibnames=[ line[18:].strip() for line in readfile(jobname+".blg",True) if 'Database file' in line ]
        for bibname in bibnames: # iterate over all bibtex files, cf test-case #50
            if '-blx.bib' in bibname: continue # irrelevant because this one is biblatex-generated
            if os.path.getmtime(bibname) >= last_bibtex_time:
                # print("bibtex is needed because "+bibname+" is more recent that "+jobname+".blg")
                return True

    return False
        
#####################################################################
# Page and file tracking logic.
#
# keeps track of current document page and current source file so that
# warnings and errors are reported with relevant details

# GS-29/04/2014-16:07. remove the closing bracket. see test-cases.
# GS-22/05/2014-12:11. add the non-capturing-group matching end-of-string
re_page = re.compile("\[(?P<num>[0-9]+)(?:$|[^/0-9])")

class PageFileTracker():
    def __init__(self):
        self.current_pagenum=1
        self.update_currentfile_should_skip_line=False # XXX
        self.opened_files=[]
        self.print_all_filenames=False # Once we start printing filenames, we will print them all

        # guess maximum page number
        self.max_pagenum=0
        for line in readfile(jobname+".log",True): #52
            if "Output written on "+jobname+".pdf" in line:
                self.max_pagenum=int(line.split('(')[1].split()[0])
        
                
    def update_page (self,line):
        ms = re_page.findall(line)
        if ms:
            self.current_pagenum = max(self.current_pagenum, int(ms[-1]) + 1)


    def update_currentfile (self,line):
        """Parse the given logline and keep track of the file being processed"""

        # if line.count('(' ) + line.count(')'):
        #     print '##%d#%d##' % (line.count('('),
        #                          line.count(')') ) , line
        #     print "opened files:", tracker_opened_files

        if self.update_currentfile_should_skip_line:
            self.update_currentfile_should_skip_line=False
            return 

        # skip the (dangerous) line after a badbox warning, so as not to
        # be confused by text coming from the document (test-cases #35, #42)
        if line.startswith("Underfull") or line.startswith("Overfull"):
            self.update_currentfile_should_skip_line=True
            pass

        # we  walk the  logline one  character  at a  time, searching  for
        # parentheses,  and tracking  nesting level.  Some of  the opening
        # parentheses are  followed by a pathname,  so we push these  on a
        # pathname stack.
        while line:
            if line[0] == ')':
                try:
                    self.opened_files.pop()
                except: # this is a workaround for #51
                    pass

            if line[0] == '(':
                suffix=line[1:]

                # if suffix does not even look like a pathname, let's not bother walking it
                if suffix[0] not in './':
                    suffix=""

                # what we want is the longest prefix of suffix that _is_ a pathname
                while suffix and not os.path.isfile(suffix):
                    suffix=suffix[:-1]

                self.opened_files.append(suffix)

            line = line[1:]

    def get_current_file(self):
        """Returns the filename where the tracker believes we are"""
        for i in range(-1, -len(self.opened_files)-1,-1):
            if self.opened_files[i]:
                return self.opened_files[i]
        # GS-2018-04-10-17:06 bugfix for test-case #48
        return "./"+jobname+".tex"

    def print(self,text):
        """Prints either `text', `file:line text', or text (page n), etc."""
        if self.print_all_filenames or (self.get_current_file() != "./"+jobname+".tex"):
            print("in file %s:"%self.get_current_file(), end=' ')
            self.print_all_filenames = True
        if self.current_pagenum > self.max_pagenum:
            # page number is obviously wrong => unhelpful => skip it
            print(text)
        else:
            print(text + " (page %d)" % self.current_pagenum)

#####################################################################
# Warning pretty-print

class WarningParser():
    def __init__(self,printer):
        # actual message to be printed on the console
        self.text = ''
        # in long warnings, we expect loglines to have a prefix e.g. '(hyperref)'
        self.prefix = ''
        # handle to the PageFileTracker
        self.printer=printer
        
    def parse(self,line):
        if (len(line) == 0) and (len(self.text)>0): # now is finally the time to spit out the message
            self.printer.print(self.text)
            self.text=''
            self.prefix=''
            
        elif self.prefix and line.startswith(self.prefix):  # we are in the middle of a (prefixed)-warning
            self.text += ' '+line[len(self.prefix):]

        elif re_warning.match(line): # Class and package warnings
            m   = re_warning.match(line)
            pkg = m.groupdict()["pkg"]
            self.prefix = ("(%s)" % pkg).ljust(m.start("text")) # guess the prefix. BUT: can be wrong, cf #27
            self.text=line

        elif line.startswith('LaTeX Warning: '): # cf #05, #09, #13, #17, #27...
            self.text=line
            if ' Unused global option(s):' in line:
                self.prefix="    " # offending options on next logline, cf #46

        elif line.startswith('pdfTeX warning:'): # cf #36, #48
            self.printer.print(line) # pdfTeX warnings are always single-line

        elif line.startswith(r'Overfull ') or line.startswith(r'Underfull '): # cf #30, #34
            if options.nobadboxes is False:
                self.printer.print(line) # bad boxes are always single-line

        elif len(self.text)>0: # we are in the middle of a non-prefixed warning e.g. #27
            self.text += ' '+line.strip()

#####################################################################
# Utility functions, mostly to help with rerun-until-fixpoint
            
def unbreak79(sequence):
    # TeX breaks its output at 79 characters. here we rejoin the fragments
    acc=''
    for fragment in sequence:
        if len(fragment)==79:
            acc+=fragment
            continue
        yield acc+fragment
        acc=''

def readfile(filename, splitlines=False):
    """read a file and return its contents as a text string"""

    if not os.path.isfile(filename):
        return None

    data = open(filename,"rb").read()
    text = data.decode('utf-8',errors='ignore')

    return text.splitlines() if splitlines else text

# The global variable 'onchange' is a dictionnary.
# We monitor the contents of these files before/after each latex compilation.
# When a change is detected:
# - if a shell command is given, then execute it.
# - otherwise (i.e. 'None') just trigger a latex rerun
onchange=dict()

def snapshot():
    """Return a dict mapping some file names to their contents (or None for non-existent files)"""

    global onchange
    if not onchange:
        onchange = {
            jobname+'.aux': None,
            jobname+'.toc': None, # table of contents
            jobname+'.gls': None, # glossaries.sty
            jobname+'.glo': "makeglossaries "+jobname,
        }

    snapshot = dict()
    for filename in onchange.keys():
        snapshot[filename]=readfile(filename)

    fls=readfile(jobname+'.fls',splitlines=True)
    if fls is None:
        return snapshot
    
    for line in [ l for l in fls if l[:5]== 'INPUT' ]:
            filename=line[6:]
            # short-cut: let's skip absolute paths (probably files from tex distro)
            if filename[0] != '/':
                snapshot[filename]=readfile(filename)
        
    return snapshot

def dict_hexdigest(some_dict, maxdigits=6):
    # utility function, to help debugging fixpoint stuff
    import hashlib
    res=dict()
    for key,value in some_dict.items():
        hasher=hashlib.md5()
        if value is not None:
            hasher.update(value.encode())
            res[key]=hasher.hexdigest()[:maxdigits]
    return res
            
def changedfiles(oldsnapshot, newsnapshot):
    """Compare the two snapshots and return an iterator with the names of the files that differ"""
    for filename in set(oldsnapshot).symmetric_difference(newsnapshot):
        yield filename
    for filename in set(oldsnapshot).intersection(set(newsnapshot)):
        if oldsnapshot[filename] != newsnapshot[filename]:
            # print("file contents changed:",oldsnapshot[filename],newsnapshot[filename])
            yield filename

def run_commmand(commandline):
    try:
        output=subprocess.check_output(commandline,shell=True).decode('utf-8', errors='ignore')
        return output
    except subprocess.CalledProcessError as e:
        print()
        print(e.output.decode('utf-8', errors='ignore').strip())
        raise RunCommandError

#####################################################################
# Latex full build. Rerun until we reach fixpoint
            
def latex_full_build():

    ####################
    # Perform first run: pdflatex, then (maybe) bibtex
    before=snapshot()
    print("compiling %s..." % (jobname+'.tex'))
    run_pdflatex() # if errors, will print them before raising exception
    after=snapshot()
    # print("before:",dict_hexdigest(before))
    # print("after: ",dict_hexdigest(after))
        
    if bibtex_needed(before[jobname+'.aux']):
        print("running BibTeX on %s..." % jobname)
        bibtex_output=run_commmand("bibtex "+jobname)
        if 'Warning--' in bibtex_output:
            print(bibtex_output.strip())
        after=snapshot() # trigger a rerun if bibtex changed the .bbl, cf #45

    ####################
    # Rerun until fixpoint
    while before != after:
        # print("before:",dict_hexdigest(before))
        # print("after: ",dict_hexdigest(after))
        for name in changedfiles(before, after):
            if name in onchange and onchange[name] is not None:
                print("onchange:", name,"->",onchange[name])
                subprocess.check_output(onchange[name],shell=True)
    
        before=snapshot()
        print("recompiling %s..." % (jobname+'.tex'))
        run_pdflatex() 
        after=snapshot()

    ####################
    # Print Warnings
    tracker=PageFileTracker()
    wp = WarningParser(tracker)
    acc=''
    for line in unbreak79(readfile(jobname+".log",True)):
        tracker.update_page(line)
        tracker.update_currentfile(line) 

        wp.parse(line)

#####################################################################
# Automated software update

def selfupdate():
    import urllib.request
    try:
        urllib.request.urlretrieve('https://raw.githubusercontent.com/guillaumesalagnac/latex-compile/master/latex-compile',
                                   filename="/tmp/latex-compile")
    except urllib.error.URLError as error:
        print("Network error:",error)
        return
    old_ver = run_commmand("python3 "   +sys.argv[0]+" --version").rstrip().split()[1]
    new_ver = run_commmand("python3 /tmp/latex-compile --version").rstrip().split()[1]

    if old_ver == new_ver:
        print("Already up to date: "+old_ver)
        return
    if old_ver < new_ver:
        os.replace("/tmp/latex-compile", sys.argv[0])
        os.chmod(sys.argv[0], 0o755)
        print("Updated to newer version: "+old_ver+" -> "+new_ver)
        return

#####################################################################
# Command-line Interface

jobname=None
if __name__ == '__main__':

    # option parsing
    argparser = argparse.ArgumentParser()
    argparser.add_argument('--version', help='print version information and exit',action="version",
                           version='%(prog)s 2020-11-23')
    argparser.add_argument('-l','--loop', help='interactive mode: loop forever, recompile when needed',action="store_true")
    argparser.add_argument('-b','--nobadboxes', help='ignore warnings about overfull and underfull boxes', action="store_true")
    argparser.add_argument('--engine',help='compile with this program instead of pdflatex',default="pdflatex")
    argparser.add_argument('--selfupdate',help='download most recent version from github',action="store_true")
    argparser.add_argument('filename',metavar='FILENAME', help='your latex file')

    if "--selfupdate" in sys.argv: # not via argparse, so that FILENAME is not required
        selfupdate()
        sys.exit(0)

    options=argparser.parse_args()

    # argument parsing
    jobname=options.filename
    if not os.path.exists(jobname+'.tex'): jobname=jobname.replace('.tex','')
    if not os.path.exists(jobname+'.tex'): 
        print(argparser.prog+": cannot find file '"+options.filename+"'")
        sys.exit(1)

    while True:
        try:
            latex_full_build()
        except RunCommandError:
            if not options.loop:
                sys.exit(1)
        except KeyboardInterrupt:
            print()# newline after ^C to look good
            sys.exit(0)

        if not options.loop:
            sys.exit(0)

        after_last_compile=snapshot()
        try:
            while True:
                time.sleep(1)
                if snapshot() != after_last_compile:
                    break
        except KeyboardInterrupt:
            print()# newline after ^C to look good
            sys.exit(0)

